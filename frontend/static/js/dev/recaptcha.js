// Generated by LiveScript 1.3.1
var recaptcha;
recaptcha = {
  lc: {
    ready: false,
    queue: [],
    tag: null,
    sitekey: null,
    global: null,
    enabled: true,
    inited: false
  },
  init: function(){
    var this$ = this;
    if (this.lc.inited) {
      return Promise.resolve();
    }
    return auth.get().then(function(g){
      var ref$;
      return ref$ = this$.lc, ref$.global = g, ref$.sitekey = (g.recaptcha || (g.recaptcha = {})).sitekey, ref$.enabled = (g.recaptcha || (g.recaptcha = {})).enabled, ref$;
    }).then(function(){
      var tag;
      if (!(this$.lc.enabled && this$.lc.sitekey) || this$.lc.tag) {
        return;
      }
      this$.lc.tag = tag = document.createElement("script");
      tag.onload = function(){
        return grecaptcha.ready(function(){
          this$.lc.ready = true;
          this$.lc.queue.map(function(it){
            return it.res();
          });
          return this$.lc.queue.splice(0);
        });
      };
      tag.setAttribute('type', "text/javascript");
      tag.setAttribute('src', "https://www.google.com/recaptcha/api.js?render=" + this$.lc.sitekey);
      return document.body.appendChild(tag);
    }).then(function(){
      return this$.lc.inited = true;
    });
  },
  get: function(action){
    var this$ = this;
    action == null && (action = 'generic');
    return this.init().then(function(){
      var p;
      if (!(this$.lc.sitekey && this$.lc.enabled)) {
        return Promise.resolve('');
      }
      p = this$.lc.ready
        ? Promise.resolve()
        : new Promise(function(res, rej){
          return this$.lc.queue.push({
            res: res,
            rej: rej
          });
        });
      return p.then(function(){
        return grecaptcha.execute(this$.lc.sitekey, {
          action: action
        });
      }).then(function(token){
        return token;
      });
    });
  }
};