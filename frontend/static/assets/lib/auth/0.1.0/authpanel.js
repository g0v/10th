// Generated by LiveScript 1.6.0
(function(){
  var main;
  main = function(opt){
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    if (opt.isValid) {
      this.isValid = opt.isValid;
    }
    this.action = 'signup';
    this.auth = opt.auth;
    this.ready = false;
    this.info = 'default';
    this.init();
    return this;
  };
  main.prototype = import$(Object.create(Object.prototype), {
    setAction: function(a){
      return this.action = a;
    },
    'switch': function(name){
      name == null && (name = 'signup');
      this.action = name;
      return this.view.render(['form', 'tab', 'show']);
    },
    setInfo: function(it){
      this.info = it;
      return this.view.render(['info']);
    },
    init: function(){
      var form, this$ = this;
      this.view = new ldView({
        root: this.root,
        handler: {
          "forgot-password": function(arg$){
            var node;
            node = arg$.node;
            return node.setAttribute('href', "/auth/reset/");
          },
          submit: function(arg$){
            var node;
            node = arg$.node;
            return node.classList.toggle('disabled', !this$.ready);
          },
          form: function(arg$){
            var node;
            node = arg$.node;
            return ['login', 'signup'].map(function(it){
              return node.classList.toggle(it, this$.action === it);
            });
          },
          info: function(arg$){
            var node;
            node = arg$.node;
            return node.classList.toggle('d-none', node.getAttribute('data-name') !== this$.info);
          },
          tab: function(arg$){
            var node, n;
            node = arg$.node;
            n = node.getAttribute('data-name');
            return node.classList.toggle('active', this$.action === n);
          },
          show: function(arg$){
            var node, n;
            node = arg$.node;
            n = node.getAttribute('data-tab');
            return node.classList.toggle('d-none', this$.action !== n);
          }
        },
        action: {
          keyup: {
            password: function(arg$){
              var evt;
              evt = arg$.evt;
              if (evt.keyCode === 13) {
                return this$.form.check({
                  now: true
                }).then(function(){
                  return this$.submit();
                });
              }
            }
          },
          click: {
            submit: function(){
              return this$.submit();
            },
            tab: function(arg$){
              var node;
              node = arg$.node;
              return this$['switch'](node.getAttribute('data-name'));
            }
          }
        }
      });
      this.ldld = new ldLoader({
        root: this.view.get('submit')
      });
      this.form = form = new ldForm({
        names: function(){
          return ['username', 'password', 'displayname'];
        },
        afterCheck: function(s, f){
          if (s.username !== 1 && !this$.isValid.username(f.username.value)) {
            s.username = 2;
          }
          if (s.password !== 1) {
            s.password = !f.password.value
              ? 1
              : !this$.isValid.password(f.password.value) ? 2 : 0;
          }
          if (this$.action === 'login') {
            return s.displayname = 0;
          } else {
            return s.displayname = !f.displayname.value
              ? 1
              : !!f.displayname.value ? 0 : 2;
          }
        },
        root: this.root
      });
      return this.form.on('readystatechange', function(it){
        this$.ready = it;
        return this$.view.render(['submit']);
      });
    },
    submit: function(){
      var val, body, ref$, this$ = this;
      if (!this.form.ready()) {
        return;
      }
      this.ldld.on();
      val = this.form.values();
      body = (ref$ = {}, ref$.username = val.username, ref$.password = val.password, ref$.displayname = val.displayname, ref$);
      return Promise.resolve().then(function(){
        var data;
        data = {};
        return ld$.fetch(this$.auth.apiRoot() + "" + this$.action, {
          method: 'POST'
        }, {
          json: body
        });
      }).then(function(){
        return this$.auth.fetch();
      })['finally'](function(){
        return this$.ldld.off();
      }).then(function(g){
        this$.setInfo('default');
        return this$.form.reset();
      })['catch'](function(e){
        console.log(e);
        this$.setInfo(this$.action + "-failed");
        this$.form.fields.password.value = null;
        return this$.form.check({
          n: 'password',
          now: true
        });
      });
    },
    isValid: {
      username: function(u){
        return curegex.get('email').exec(u);
      },
      password: function(p){
        return p && p.length >= 8;
      }
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    window.authpanel = main;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
