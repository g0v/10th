// Generated by LiveScript 1.6.0
(function(){
  var request, lderror, aux;
  request = require('request');
  lderror = require('lderror');
  aux = require('./aux');
  (function(it){
    return module.exports = it;
  })(function(backend){
    var config, ref$, main;
    config = (ref$ = backend.config).captcha || (ref$.captcha = {});
    return main = {
      verifier: {
        hcaptcha: function(req, res, config, captcha){
          return new Promise(function(resolve, reject){
            return request({
              url: 'https://hcaptcha.com/siteverify',
              method: 'POST',
              form: {
                secret: config.secret,
                response: captcha,
                remoteip: aux.ip(req)
              }
            }, function(e, r, b){
              var data;
              if (e) {
                reject(lderror(1010));
              }
              try {
                data = JSON.parse(b);
              } catch (e$) {
                e = e$;
                return reject(lderror.reject(1010));
              }
              if (data.success === false) {
                return reject(lderror(1009));
              }
              return resolve({
                score: data.score,
                verified: true
              });
            });
          });
        },
        recaptcha_v2_checkbox: function(req, res, config, captcha){
          return new Promise(function(resolve, reject){
            return request({
              url: 'https://www.google.com/recaptcha/api/siteverify',
              method: 'POST',
              form: {
                secret: config.secret,
                response: captcha.token,
                remoteip: aux.ip(req)
              }
            }, function(e, r, b){
              var data;
              if (e) {
                return reject(lderror(1010));
              }
              try {
                data = JSON.parse(b);
              } catch (e$) {
                e = e$;
                return reject(lderror(1010));
              }
              if (data.success === false) {
                return reject(lderror(1009));
              }
              return resolve({
                score: data.score,
                verified: true
              });
            });
          });
        },
        recaptcha_v3: function(req, res, config, captcha){
          return new Promise(function(resolve, reject){
            return request({
              url: 'https://www.google.com/recaptcha/api/siteverify',
              method: 'POST',
              form: {
                secret: config.secret,
                response: captcha.token,
                remoteip: aux.ip(req)
              }
            }, function(e, r, b){
              var data;
              if (e) {
                return reject(lderror(1010));
              }
              try {
                data = JSON.parse(b);
              } catch (e$) {
                e = e$;
                return reject(lderror(1010));
              }
              if (data.success === false) {
                return reject(lderror(1009));
              }
              return resolve({
                score: data.score,
                verified: true
              });
            });
          });
        }
      },
      verify: function(req, res, next){
        var captcha, ref$;
        captcha = req.body && req.body.captcha
          ? req.body.captcha
          : req.fields ? req.fields.captcha : null;
        if (!(captcha && captcha.token)) {
          return Promise.resolve({
            score: 0,
            verified: false
          });
        }
        if (!((ref$ = captcha.name) === 'hcaptcha' || ref$ === 'recaptcha_v3' || ref$ === 'recaptcha_v2_checkbox')) {
          return lderror.reject(1020);
        }
        if (!config[captcha.name]) {
          return lderror.reject(1020);
        }
        return main.verifier[captcha.name](req, res, config[captcha.name], captcha);
      },
      middleware: function(){
        var this$ = this;
        if (!(config && (!(config.enabled != null) || config.enabled))) {
          return function(req, res, next){
            return next();
          };
        }
        return function(req, res, next){
          return this$.verify(req, res, next).then(function(cap){
            if (!cap.score || cap.score < 0.5) {
              return next(lderror(1009));
            }
            return next();
          })['catch'](function(e){
            return next(e);
          });
        };
      }
    };
  });
}).call(this);
