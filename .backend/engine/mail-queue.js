// Generated by LiveScript 1.6.0
(function(){
  var fs, colors, jsYaml, lderror, nodemailer, nodemailerMailgunTransport, md, mailQueue;
  fs = require('fs');
  colors = require('@plotdb/colors');
  jsYaml = require('js-yaml');
  lderror = require('lderror');
  nodemailer = require('nodemailer');
  nodemailerMailgunTransport = require('nodemailer-mailgun-transport');
  md = require('./utils/md');
  mailQueue = function(opt){
    var this$ = this;
    opt == null && (opt = {});
    this.api = !opt.mailgun
      ? {
        sendMail: function(){
          this$.log.error("sendMail called while mail gateway is not available");
          return lderror.reject(500, "mail service not available");
        }
      }
      : nodemailer.createTransport(nodemailerMailgunTransport(opt.mailgun));
    this.log = opt.logger;
    this.list = [];
    return this;
  };
  mailQueue.prototype = import$(Object.create(Object.prototype), {
    add: function(obj){
      this.list.push(obj);
      return this.handler();
    },
    handle: null,
    handler: function(){
      var this$ = this;
      if (this.handle) {
        return;
      }
      this.log.info("new job incoming, handling...".cyan);
      return this.handle = setInterval(function(){
        var obj;
        this$.log.info((this$.list.length + " jobs remain...").cyan);
        obj = this$.list.splice(0, 1)[0];
        if (!obj) {
          this$.log.info("all job done, take a rest.".green);
          clearInterval(this$.handle);
          this$.handle = null;
          return;
        }
        return this$.sendDirectly(obj.payload).then(obj.res)['catch'](obj.rej);
      }, 5000);
    },
    send: function(payload, opt){
      var this$ = this;
      opt == null && (opt = {});
      if (opt.now) {
        return this.sendDirectly(payload);
      }
      return new Promise(function(res, rej){
        return this$.add({
          payload: payload,
          res: res,
          rej: rej
        });
      });
    },
    sendDirectly: function(payload){
      var this$ = this;
      return new Promise(function(res, rej){
        this$.log.info(("sending [from:" + payload.from + "] [to:" + payload.to + "] [subject:" + payload.subject + "]").cyan);
        return this$.api.sendMail(payload, function(e, i){
          if (!e) {
            return res();
          }
          this$.log.error("send mail failed: api.sendMail failed.", e);
          return rej(lderror(500));
        });
      });
    },
    sendFromMd: function(payload, map, opt){
      var this$ = this;
      map == null && (map = {});
      opt == null && (opt = {});
      return new Promise(function(res, rej){
        var content, k, ref$, v, re;
        content = payload.content || '';
        for (k in ref$ = map) {
          v = ref$[k];
          re = new RegExp("#{" + k + "}", "g");
          content = content.replace(re, v);
          payload.from = payload.from.replace(re, v);
          payload.subject = payload.subject.replace(re, v);
        }
        payload.text = md.toText(content);
        payload.html = md.toHtml(content);
        delete payload.content;
        return this$.send(payload, opt).then(function(){
          return res();
        });
      });
    },
    byTemplate: function(name, email, map, config){
      var this$ = this;
      map == null && (map = {});
      config == null && (config = {});
      return new Promise(function(res, rej){
        var path, that;
        path = (that = config.path) ? that : '.';
        return fs.readFile(path + "/config/mail/" + name + ".yaml", function(e, content){
          var payload, option;
          if (e) {
            this$.log.error("send mail failed: read template file failed.", e);
            return rej(lderror(500));
          }
          try {
            payload = jsYaml.safeLoad(content);
          } catch (e$) {
            e = e$;
            this$.log.error("send mail failed: parse template yaml failed.", e);
            return rej(lderror(500));
          }
          option = {
            from: payload.from,
            to: email,
            subject: payload.subject,
            content: payload.content
          };
          if (config.bcc) {
            option.bcc = config.bcc;
          }
          return this$.sendFromMd(option, map, {
            now: config.now
          }).then(function(){
            return res();
          })['catch'](function(e){
            return rej(e);
          });
        });
      });
    }
  });
  module.exports = mailQueue;
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
