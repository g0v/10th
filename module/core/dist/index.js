// Generated by LiveScript 1.6.0
(function(){
  ldc.register('core', [], function(){
    return {
      init: proxise.once(function(){
        var err, this$ = this;
        this.global = {};
        this.user = {};
        this.zmgr = new zmgr();
        this.manager = new block.manager({
          registry: function(arg$){
            var name, version, path, type;
            name = arg$.name, version = arg$.version, path = arg$.path, type = arg$.type;
            path = path || (type === 'block'
              ? 'index.html'
              : type ? "index.min." + type : 'index.min.js');
            if (name === "@local/error") {
              return "/modules/cover/error/" + path;
            }
            return "/assets/lib/" + name + "/" + (version || 'main') + "/" + path;
          }
        });
        this.loader = new ldloader({
          className: "ldld full",
          zmgr: this.zmgr.scope(zmgr.splash)
        });
        this.captcha = new captcha({
          manager: this.manager
        });
        this.ldcvmgr = new ldcvmgr({
          manager: this.manager
        });
        this.auth = new auth({
          manager: this.manager,
          zmgr: this.zmgr,
          loader: this.loader
        });
        ldc.action('ldcvmgr', this.ldcvmgr);
        err = new lderror.handler({
          handler: function(n, e){
            return this$.ldcvmgr.get({
              name: "@local/error",
              path: n + ".html"
            }, e);
          }
        });
        this.error = function(e){
          return err(e);
        };
        this.update = function(g){
          return this.global = g, this.user = g.user || {}, this;
        };
        this.auth.on('server-down', this.error);
        this.auth.on('logout', function(){
          return window.location.replace('/');
        });
        return this.manager.init().then(function(){
          return i18next.init({
            supportedLng: ['en', 'zh-TW'],
            fallbackLng: 'zh-TW',
            fallbackNS: '',
            defaultNS: ''
          });
        }).then(function(){
          if (typeof i18nextBrowserLanguageDetector != 'undefined' && i18nextBrowserLanguageDetector !== null) {
            return i18next.use(i18nextBrowserLanguageDetector);
          }
        }).then(function(){
          console.log("use language: ", navigator.language) || navigator.userLanguage;
          return i18next.changeLanguage(navigator.language) || navigator.userLanguage;
        }).then(function(){
          return block.i18n.use(i18next);
        }).then(function(){
          return this$.auth.get();
        }).then(function(g){
          this$.global = g;
          this$.user = g.user;
          return this$.captcha.init(g.captcha);
        }).then(function(){
          this$.auth.on('change', function(g){
            return this$.update(g);
          });
          return this$;
        });
      })
    };
  });
}).call(this);
